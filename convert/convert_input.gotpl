{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/boil"}}
{{ reserveImport "github.com/ericlagergren/decimal"  }}
{{ reserveImport "github.com/volatiletech/null"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/types"  }}
{{ reserveImport "github.com/web-ridge/gqlgen-sqlboiler/helper" }}
{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/queries/qm" }}
{{ reserveImport "database/sql" }}
{{ reserveImport  $.BackendModelsPath }}
{{ reserveImport  $.FrontendModelsPath }}


{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	{{- if .IsInput }}
				
		func {{ .PluralName|go }}ToBoiler(am []*graphql_models.{{ .Name|go }})( []*models.{{ .BoilerName|go }}) {
			ar := make([]*models.{{ .BoilerName|go }}, len(am))
			for i,m := range am {
				ar[i] = {{ .Name|go }}ToBoiler(
					m,
					{{ range $field := .Fields -}}
						{{ if $field.IsRelation -}}
							0, // TODO: resolved id e.g. {{ $field.Name }}Ids[i]
						{{ end -}}
					{{ end -}}
				)
			}
			return ar
		}
		
		func {{ .Name|go }}ToBoiler(
				m *graphql_models.{{ .Name|go }},
			)( *models.{{ .BoilerName|go }}) {
			if m == nil {
				return nil
			}	
			r := &models.{{ .BoilerName|go }}{
			{{ range $field := .Fields -}}
				{{ if $field.IsID }}
					{{- $field.BoilerName|go }} : {{ $field.CustomGraphIDFunction|go }}(m.{{ $field.Name|go }}),
				{{ else if and $field.IsRelation  -}}
				{{ else if $field.IsCustomFunction }}
					{{- $field.BoilerName|go }} : helper.{{ $field.CustomFromFunction }}(m.{{ $field.Name|go }}),
				{{ else }}	
					{{- $field.BoilerName|go }}: m.{{ $field.Name|go }},
				{{ end }}
			{{- end -}}
			}
			return r
		}

		{{ range $field := .Fields -}}
			{{ if and $field.IsRelation $field.IsNullableID -}}
			func {{ $model.Name|go }}ModelMWithWith{{ .Name|go }}(modelM map[string]interface{}, id {{ $field.BoilerType }}) map[string]interface{} {
				modelM[models.{{ $model.BoilerName|go }}Columns.{{- $field.BoilerName|go }}ID] = id
				return modelM
			}
			{{ end -}}
		{{ end -}}

		func {{ .Name|go }}ToModelM(
			ctx context.Context, 
			m graphql_models.{{ .Name|go }},
			key string, 
		) models.M {
			input := helper.GetInputFromContext(ctx, key)
			modelM := models.M{}
			for key, _ := range input {
				switch key {
					{{ range $field := .Fields -}}
					case "{{ $field.CamelCaseName }}":
						{{ if $field.IsID -}}
							modelM[models.{{ $model.BoilerName|go }}Columns.{{- $field.BoilerName|go }}] = {{ $field.CustomGraphIDFunction|go }}(m.{{ $field.Name|go }})
						{{ else if $field.IsRelation  -}}
						{{ else if $field.IsCustomFunction -}}
							modelM[models.{{ $model.BoilerName|go }}Columns.{{- $field.BoilerName|go }}] = helper.{{ $field.CustomFromFunction }}(m.{{ $field.Name|go }})
						{{ else -}}	
							modelM[models.{{ $model.BoilerName|go }}Columns.{{- $field.BoilerName|go }}] = m.{{ $field.Name|go }}
						{{ end -}}
					{{ end -}}
				}
			}
			return modelM
		}
		func {{ .Name|go }}ToBoilerWhitelist(ctx context.Context, key string, extraColumns ...string) boil.Columns {
			input := helper.GetInputFromContext(ctx, key)
			columnsWhichAreSet := []string{}
			for key, _ := range input {
				switch key {
					{{ range $field := .Fields -}}
						{{  if $field.IsRelation -}}
						case "{{ $field.CamelCaseName }}":
							columnsWhichAreSet = append(columnsWhichAreSet, models.{{ $model.BoilerName|go }}Columns.{{- $field.BoilerName|go }}ID)
						{{ else -}}
						case "{{ $field.CamelCaseName }}":
							columnsWhichAreSet = append(columnsWhichAreSet, models.{{ $model.BoilerName|go }}Columns.{{- $field.BoilerName|go }})
						{{ end -}}
					{{ end -}}
				}
			}
			columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
			return boil.Whitelist(columnsWhichAreSet...)
		}
	{{- end }}
{{- end }}
