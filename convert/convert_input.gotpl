{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/boil"}}
{{ reserveImport "github.com/ericlagergren/decimal"  }}
{{ reserveImport "github.com/volatiletech/null"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/types"  }}
{{ reserveImport "github.com/web-ridge/gqlgen-sqlboiler/helper" }}
{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/queries/qm" }}
{{ reserveImport "database/sql" }}
{{ reserveImport  $.BackendModelsPath }}
{{ reserveImport  $.FrontendModelsPath }}


{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	{{- if .IsInput }}
				
		func {{ .PluralName|go }}ToBoiler(am []*graphql_models.{{ .Name|go }})( []*models.{{ .BoilerModel.Name|go }}) {
			ar := make([]*models.{{ .BoilerModel.Name|go }}, len(am))
			for i,m := range am {
				ar[i] = {{ .Name|go }}ToBoiler(
					m,
				)
			}
			return ar
		}
		
		func {{ .Name|go }}ToBoiler(
				m *graphql_models.{{ .Name|go }},
			)( *models.{{ .BoilerModel.Name|go }}) {
			if m == nil {
				return nil
			}	
			r := &models.{{ .BoilerModel.Name|go }}{
			{{ range $field := .Fields -}}
				{{ if $field.IsID -}}
					{{- $field.BoilerField.Name|go }} : {{ $field.ConvertConfig.ToBoiler }},
				{{ else if $field.IsRelation -}}
				{{ else if $field.ConvertConfig.IsCustom -}}
					{{- $field.BoilerField.Name|go }} : {{ $field.ConvertConfig.ToBoiler }}(m.{{ $field.Name|go }}),
				{{ else -}}	
					{{- $field.BoilerField.Name|go }}: m.{{ $field.Name|go }},
				{{ end }}
			{{- end -}}
			}
			return r
		}

		func {{ .Name|go }}ToModelM(
			input map[string]interface{},
			m graphql_models.{{ .Name|go }},
		) models.M {
			modelM := models.M{}
			for key, _ := range input {
				switch key {
					{{ range $field := .Fields -}}
					case "{{ $field.Name }}":
						{{ if $field.IsID -}}
							modelM[models.{{ $model.BoilerModel.Name|go }}Columns.{{- $field.BoilerField.Name|go }}] = {{ $field.ConvertConfig.ToBoiler }}
						{{ else if $field.IsRelation -}}
						{{ else if $field.ConvertConfig.IsCustom -}}
							modelM[models.{{ $model.BoilerModel.Name|go }}Columns.{{- $field.BoilerField.Name|go }}] = {{ $field.ConvertConfig.ToBoiler }}(m.{{ $field.Name|go }})
						{{ else -}}	
							modelM[models.{{ $model.BoilerModel.Name|go }}Columns.{{- $field.BoilerField.Name|go }}] = m.{{ $field.Name|go }}
						{{ end -}}
					{{ end -}}
				}
			}
			return modelM
		}
		
		func {{ .Name|go }}ToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
			columnsWhichAreSet := []string{}
			for key, _ := range input {
				switch key {
					{{ range $field := .Fields -}}
						case "{{ $field.Name }}":
							columnsWhichAreSet = append(columnsWhichAreSet, models.{{ $model.BoilerModel.Name|go }}Columns.{{- $field.BoilerField.Name|go }})
					{{ end -}}
				}
			}
			columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
			return boil.Whitelist(columnsWhichAreSet...)
		}
	{{- end }}
{{- end }}
