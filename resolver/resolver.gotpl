{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/queries/qm" }}
{{ reserveImport "github.com/web-ridge/gqlgen-sqlboiler/helper" }}
{{ reserveImport "database/sql" }}
{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{ .Imports }}

{{ if .HasRoot }}
	type {{.ResolverType}} struct {
		db *sql.DB
	}
{{ end }}

const inputKey = "input"

{{ range $resolver := .Resolvers -}}
	func (r *{{lcFirst $resolver.Object.Name}}{{ucFirst $.ResolverType}}) {{$resolver.Field.GoFieldName}} {{ $resolver.Field.ShortResolverDeclaration }} {
	

		{{- if .IsSingle }}
			dbID := {{ .Model.Name }}ID(id)
			mods := helper.GetPreloadMods(ctx, {{ .Model.Name|go }}PreloadMap)
			mods = append(mods, dm.{{ .Model.Name|go }}Where.ID.EQ(dbID))
			{{- if .Model.BoilerModel.HasOrganizationID }}
				mods = append(mods, dm.{{ .Model.Name }}Where.OrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserOrganizationID }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserOrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserID }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserID.EQ(
					auth.UserIDFromContext(ctx),
				))
			{{- end }}
			m, err := dm.{{ .Model.PluralName|go }}(mods...).One(ctx, r.db)
			return {{ .Model.Name|go }}ToGraphQL(m, nil), err

		{{- end -}}

		{{- if .IsList }}
			mods := helper.GetPreloadMods(ctx, {{ .Model.Name|go }}PreloadMap)
			{{- if .Model.BoilerModel.HasOrganizationID }}
				mods = append(mods, dm.{{ .Model.Name }}Where.OrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserOrganizationID }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserOrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserID }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserID.EQ(
					auth.UserIDFromContext(ctx),
				))
			{{- end }}
			mods = append(mods, {{.Model.Name}}FilterToMods(filter)...)
			a, err := dm.{{ .Model.PluralName|go }}(mods...).All(ctx, r.db)
			return {{ .Model.PluralName|go }}ToGraphQL(a, nil), err

		{{- end -}}

		{{- if .IsCreate }}

			m := {{ .InputModel.Name }}ToBoiler(&input)
			{{ $model := .Model -}}
			{{ range $field := .InputModel.Fields -}}
				{{ if $field.IsRelation -}}
					if input.{{ $field.Name|go }} != nil {
						{{ $field.Name }} := {{ $field.BoilerField.Relationship.Name }}CreateInputToBoiler(input.{{ $field.Name|go }})
						{{- if $field.BoilerField.Relationship.HasOrganizationID  }}
							{{ $field.Name }}.OrganizationID = auth.OrganizationIDFromContext(ctx)
						{{- end }}
						{{- if $field.BoilerField.Relationship.HasUserOrganizationID  }}
							{{ $field.Name }}.UserOrganizationID = auth.OrganizationIDFromContext(ctx)
						{{- end }}
						{{- if $field.BoilerField.Relationship.HasUserID  }}
							{{ $field.Name }}.UserID = auth.UserIDFromContext(ctx)
						{{- end }}

						{{ $field.Name }}Input := {{ $field.BoilerField.Relationship.Name }}CreateInputToBoilerWhitelist(
							helper.GetInputFromContext(ctx, "input.{{ $field.Name }}"),
							{{- if $model.BoilerModel.HasOrganizationID  }}
								dm.{{ $field.BoilerField.Relationship.Name }}Columns.OrganizationID,
							{{- end }}
							{{- if $model.BoilerModel.HasUserOrganizationID  }}
								dm.{{ $field.BoilerField.Relationship.Name }}Columns.UserOrganizationID,
							{{- end }}
							{{- if $model.BoilerModel.HasUserID  }}
								dm.{{ $field.BoilerField.Relationship.Name }}Columns.UserID,
							{{- end }}
						)

						// TODO: create the nested relations of {{ $field.Name }}Input if they exist
						if err := {{ $field.Name }}.Insert(ctx, r.db, {{ $field.Name }}Input); err != nil {
							return nil, err
						}
						m.{{ $field.Name|go }}ID = {{ $field.Name }}.ID
					}
					
				{{ end -}}
			{{ end -}}
			{{ if .Model.BoilerModel.HasOrganizationID  -}}
				m.OrganizationID = auth.OrganizationIDFromContext(ctx)
			{{- end }}
			{{ if .Model.BoilerModel.HasUserOrganizationID  -}}
				m.UserOrganizationID = auth.OrganizationIDFromContext(ctx)
			{{- end }}
			{{ if .Model.BoilerModel.HasUserID  -}}
				m.UserID = auth.UserIDFromContext(ctx)
			{{- end }}

			whiteList := {{ .InputModel.Name }}ToBoilerWhitelist(
				helper.GetInputFromContext(ctx, inputKey),
				{{- if .Model.BoilerModel.HasOrganizationID  }}
					dm.{{ .Model.Name }}Columns.OrganizationID,
				{{- end }}
				{{- if .Model.BoilerModel.HasUserOrganizationID  }}
					dm.{{ .Model.Name }}Columns.UserOrganizationID,
				{{- end }}
				{{- if .Model.BoilerModel.HasUserID  }}
					dm.{{ .Model.Name }}Columns.UserID,
				{{- end }}
			)
			if err := m.Insert(ctx, r.db, whiteList); err != nil {
				return nil, err
			}

			// resolve requested fields after creating
			mods := helper.GetPreloadModsWithLevel(ctx, {{ .Model.Name|go }}PreloadMap, {{ .Model.Name|go }}PayloadPreloadLevels.{{ .Model.Name|go }})
			mods = append(mods, dm.{{ .Model.Name|go }}Where.ID.EQ(m.ID))
			{{- if .Model.BoilerModel.HasOrganizationID  }}
				mods = append(mods, dm.{{ .Model.Name }}Where.OrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserOrganizationID  }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserOrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserID  }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserID.EQ(
					auth.UserIDFromContext(ctx),
				))
			{{- end }}
			pM, err := dm.{{ .Model.PluralName|go }}(mods...).One(ctx, r.db)
			return &fm.{{ .Model.Name }}Payload{
				{{ .Model.Name|go }}: {{ .Model.Name|go }}ToGraphQL(pM, nil),
			}, err

		{{- end -}}

		{{- if .IsUpdate }}
			m := {{ .InputModel.Name }}ToModelM(helper.GetInputFromContext(ctx, inputKey), input)

			{{ $resolver := . -}}
			{{ $model := .Model -}}
			{{ range $field := .InputModel.Fields -}}
				{{ if $field.IsRelation -}}
					if input.{{ $field.Name|go }} != nil {
						dbID := {{ $field.BoilerField.Relationship.Name }}ID(id)
						nestedM := {{ $field.BoilerField.Relationship.Name }}UpdateInputToModelM(
							helper.GetInputFromContext(ctx, "input.{{ $field.Name }}"), 
							*input.{{ $field.Name|go }},
						)
						if _, err := dm.{{ $field.BoilerField.Relationship.PluralName }}(
							dm.{{ $field.BoilerField.Relationship.Name }}Where.ID.EQ(dbID),
							{{- if  $field.BoilerField.Relationship.HasOrganizationID }}
								dm.{{ $field.BoilerField.Relationship.Name }}Where.OrganizationID.EQ(
									auth.OrganizationIDFromContext(ctx),
								),
							{{- end }}
							{{- if  $field.BoilerField.Relationship.HasUserOrganizationID }}
								dm.{{ $field.BoilerField.Relationship.Name }}Where.UserOrganizationID.EQ(
									auth.OrganizationIDFromContext(ctx),
								),
							{{- end }}
							{{- if  $field.BoilerField.Relationship.HasUserID }}
								dm.{{ $field.BoilerField.Relationship.Name }}Where.UserID.EQ(
									auth.UserIDFromContext(ctx),
								),
							{{- end }}
						).UpdateAll(ctx, r.db, nestedM); err != nil {
							return nil, err
						}
					}
					
				{{ end -}}
			{{ end -}}

			dbID := {{ .Model.Name }}ID(id)
			if _, err := dm.{{ .Model.PluralName }}(
				dm.{{ .Model.Name }}Where.ID.EQ(dbID),
				{{- if .Model.BoilerModel.HasOrganizationID  }}
					dm.{{ .Model.Name }}Where.OrganizationID.EQ(auth.OrganizationIDFromContext(ctx)),
				{{- end }}
				{{- if .Model.BoilerModel.HasUserOrganizationID  }}
					dm.{{ .Model.Name }}Where.UserOrganizationID.EQ(auth.OrganizationIDFromContext(ctx)),
				{{- end }}
				{{- if .Model.BoilerModel.HasUserID  }}
					dm.{{ .Model.Name }}Where.UserID.EQ(auth.UserIDFromContext(ctx)),
				{{- end }}
			).UpdateAll(ctx, r.db, m); err != nil {
				return nil, err
			}

			// resolve requested fields after updating
			mods := helper.GetPreloadModsWithLevel(ctx, {{ .Model.Name|go }}PreloadMap, {{ .Model.Name|go }}PayloadPreloadLevels.{{ .Model.Name|go }})
			mods = append(mods, dm.{{ .Model.Name|go }}Where.ID.EQ(dbID))
			{{- if .Model.BoilerModel.HasOrganizationID  }}
				mods = append(mods, dm.{{ .Model.Name }}Where.OrganizationID.EQ(auth.OrganizationIDFromContext(ctx)))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserOrganizationID  }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserOrganizationID.EQ(auth.OrganizationIDFromContext(ctx)))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserID  }}
				mods = append(mods, dm.{{ .Model.Name }}Where.UserID.EQ(auth.UserIDFromContext(ctx)))
			{{- end }}

			pM, err := dm.{{ .Model.PluralName|go }}(mods...).One(ctx, r.db)
			return &fm.{{ .Model.Name|go }}Payload{
				{{ .Model.Name|go }}: {{ .Model.Name|go }}ToGraphQL(pM, nil),
			}, err

		{{- end -}}

		{{- if .IsDelete }}
			mods := []qm.QueryMod{
				dm.{{ .Model.Name|go }}Where.ID.EQ({{ .Model.Name|go }}ID(id)),
				{{- if .Model.BoilerModel.HasOrganizationID  }}
					dm.{{ .Model.Name }}Where.OrganizationID.EQ(auth.OrganizationIDFromContext(ctx)),
				{{- end }}
				{{- if .Model.BoilerModel.HasUserOrganizationID  }}
					dm.{{ .Model.Name }}Where.UserOrganizationID.EQ(auth.OrganizationIDFromContext(ctx)),
				{{- end }}
				{{- if .Model.BoilerModel.HasUserID  }}
					dm.{{ .Model.Name }}Where.UserID.EQ(auth.UserIDFromContext(ctx)),
				{{- end }}
			}
			 _, err := dm.{{ .Model.PluralName|go }}(mods...).DeleteAll(ctx, r.db)
			return &fm.{{ .Model.Name|go }}DeletePayload{
				ID: id,
			}, err

		{{- end -}}

		{{- if .IsBatchCreate }}
		// TODO: Implement batch create
		return nil, nil

		{{- end -}}

		{{- if .IsBatchUpdate }}
			var updateMods []qm.QueryMod
			{{- if .Model.BoilerModel.HasOrganizationID }}
				updateMods = append(updateMods, dm.{{ .Model.Name }}Where.OrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserOrganizationID }}
				updateMods = append(updateMods, dm.{{ .Model.Name }}Where.UserOrganizationID.EQ(
					auth.OrganizationIDFromContext(ctx),
				))
			{{- end }}
			{{- if .Model.BoilerModel.HasUserID }}
				updateMods = append(updateMods, dm.{{ .Model.Name }}Where.UserID.EQ(
					auth.UserIDFromContext(ctx),
				))
			{{- end }}
			updateMods = append(updateMods, {{.Model.Name}}FilterToMods(filter)...)

			m := {{ .InputModel.Name }}ToModelM(helper.GetInputFromContext(ctx, inputKey), input)
			if _, err := dm.{{ .Model.PluralName }}(updateMods...).UpdateAll(ctx, r.db, m); err != nil {
				return nil, err
			}

			return &fm.{{ .Model.PluralName|go }}UpdatePayload{
				Ok: true,
			}, nil
		{{- end -}}

		{{- if .IsBatchDelete }}
		// TODO: Implement batch delete
		return nil, nil

		{{- end }}
	}

{{ end }}

{{ range $object := .Objects -}}
	func (r *{{$.ResolverType}}) {{$object.Name}}() {{ $object.ResolverInterface | ref }} { return &{{lcFirst $object.Name}}{{ucFirst $.ResolverType}}{r} }
{{ end }}

{{ range $object := .Objects -}}
	type {{lcFirst $object.Name}}{{ucFirst $.ResolverType}} struct { *{{$.ResolverType}} }
{{ end }}

{{ if (ne .RemainingSource "") }}
    // !!! WARNING !!!
    // The code below was going to be deleted when updating resolvers. It has been copied here so you have
    // one last chance to move it out of harms way if you want. There are two reasons this happens:
	//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
	//    it when you're done.
	//  - You have helper methods in this file. Move them out to keep these resolver files clean.
	{{ .RemainingSource }}
{{ end }}