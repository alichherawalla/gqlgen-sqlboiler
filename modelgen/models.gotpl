{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}

{{ reserveImport "github.com/volatiletech/null"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/types"  }}

{{ reserveImport "github.com/vektah/gqlparser" }}
{{ reserveImport "github.com/vektah/gqlparser/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}
{{ reserveImport  $.BackendModelsPath }}
{{ reserveImport  $.FrontendModelsPath }}


func ID(ID string, entityName string) uint {
	i, _ := strconv.ParseUint(strings.TrimPrefix(ID, entityName+"_"), 10, 64)
	return uint(i)
}

func UniqueID(id uint, entityName string) string {
	return entityName + "_" + strconv.Itoa(int(id))
}


func stringifyToNullString(x interface{}) *string {
	switch x.(type) {
	case nil:
		return nil
	case types.NullDecimal:
		s := strconv.Itoa(x.(types.NullDecimal).Big())
		return &s
	case null.String:
		return x.(null.String).Ptr()
	case null.Int:
		intV := x.(null.Int).Ptr()
		if intV != nil {
			s := strconv.Itoa(*intV)
			return &s
		}
		return nil
	default:
		return nil
	}
}

func stringToBoiler(x interface{}, dbType interface{}) interface{} {
	return nil
}

func boilerToNullString(x interface{}) *string {
	switch x.(type) {
	case nil:
		return nil
	case types.NullDecimal:
		s := strconv.Itoa(x.(types.NullDecimal).Big())
		return &s
	case null.String:
		return x.(null.String).Ptr()
	case null.Int:
		intV := x.(null.Int).Ptr()
		if intV != nil {
			s := strconv.Itoa(*intV)
			return &s
		}
		return nil
	default:
		return nil
	}
}

{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}

	func {{ .Name|go }}ToGraphQL(m *models.{{ .Name|go }})( *graphql_models.{{ .Name|go }}) {
		if m == nil {
			return nil
		}
		r := &graphql_models.{{ .Name|go }}{
			{{ range $field := .Fields }}
			
				{{- with .Description }}
					{{.|prefixLines "// "}}
				{{- end}}
				{{- if $field.IsId -}}
					{{ $field.Name|go }}: UniqueID(m.{{ $field.Name|go }}, "{{ $model.Name|go }}"),
				{{- else if $field.IsRelation -}}
				{{- else if $field.IsPointerToString }}
					{{ $field.Name|go }}: boilerToNullString(m.{{ $field.Name|go }}),
				{{- else }}	
					{{ $field.Name|go }}: m.{{ $field.Name|go }},
				{{- end -}}
			{{- end }}
		}

		{{- range $field := .Fields }}
			{{- if $field.IsRelation }}
			// TODO: relation
			if !m.{{ $field.Name|go }}ID.IsZero() {
				// if m.R == nil || m.R.{{ $field.Name|go }} == nil {
				// 	r.{{ $field.Name|go }} = {{ $field.Name|go }}WithID(m.{{ $field.Name|go }}ID.Int)
				// } else {
					r.{{ $field.Name|go }} ={{ $field.Name|go }}ToGraphQL(m.R.{{ $field.Name|go }}s)
				// }
			}
			{{end -}}
		{{- end }}

		return r
	}


	func {{ .Name|go }}ToBoiler(m *graphql_models.{{ .Name|go }})( *models.{{ .Name|go }}) {
		if m == nil {
			return nil
		}	
		r := &models.{{ .Name|go }}{}
		// r := &models.{{ .Name|go }}{
		{{ range $field := .Fields }}
			{{- with .Description }}
				{{.|prefixLines "// "}}
			{{- end}}
			{{- if $field.IsId -}}
				r.{{ $field.Name|go }} = ID(m.{{ $field.Name|go }}, "{{ $model.Name|go }}")
			{{- else if $field.IsRelation }}
			{{- else if $field.IsPointerToString }}
				r.{{ $field.Name|go }} = stringToBoiler(m.{{ $field.Name|go }}, r.{{ $field.Name|go }})
			{{- else }}	
				r.{{ $field.Name|go }} = m.{{ $field.Name|go }}
			{{- end -}}
		{{- end }}
		// }

		{{- range $field := .Fields }}
			{{- if $field.IsRelation }}
				// TODO relation
		// {{ $field.Name|go }}: {{ $field.Name|go }}ToBoiler(m.{{ $field.Name|go }}),

			{{end -}}
		{{- end }}
		return r
	}

{{- end }}
