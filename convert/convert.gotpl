{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/boil"}}
{{ reserveImport "github.com/ericlagergren/decimal"  }}
{{ reserveImport "github.com/volatiletech/null"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/types"  }}
{{ reserveImport "github.com/web-ridge/gqlgen-sqlboiler/helper" }}
{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}
{{ reserveImport "github.com/volatiletech/sqlboiler/queries/qm" }}
{{ reserveImport "database/sql" }}
{{ reserveImport  $.BackendModelsPath }}
{{ reserveImport  $.FrontendModelsPath }}

func alreadyConverted(roots []interface{}, check interface{}) bool {
	var matched int
	for _, root := range roots {
		if root == check {
			matched++
		}
	}
	return matched > 2
}

{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	{{- if not .IsInput -}}
	{{- if not .IsPayload -}}

		func {{ .Name|go }}WithIntID(id int) *graphql_models.{{ .Name|go }} {
			return &graphql_models.{{ .Name|go }}{
				ID: helper.IntToStringIDUnique(id, models.TableNames.{{ $model.Name|go }}),
			}
		}

		func {{ .Name|go }}WithUintID(id uint) *graphql_models.{{ .Name|go }} {
			return &graphql_models.{{ .Name|go }}{
				ID: helper.UintToStringIDUnique(id, models.TableNames.{{ $model.Name|go }}),
			}
		}

		func {{ .Name|go }}WithNullDotUintID(id null.Uint) *graphql_models.{{ .Name|go }} {
			return {{ .Name|go }}WithUintID(id.Uint)
		}

		func {{ .Name|go }}WithNullDotIntID(id null.Int) *graphql_models.{{ .Name|go }} {
			return {{ .Name|go }}WithIntID(id.Int)
		}

		func {{ .PluralName|go }}ToGraphQL(am []*models.{{ .Name|go }}, roots []interface{})( []*graphql_models.{{ .Name|go }}) {
			ar := make([]*graphql_models.{{ .Name|go }}, len(am))
			for i,m := range am {
				ar[i] = {{ .Name|go }}ToGraphQL(m, append(roots, m))
			}
			return ar
		}

	
		{{ range $field := .Fields }}
			{{- if $field.IsPrimaryID -}}
				func {{ $model.Name|go }}IDUnique(v {{$field.BoilerType}})({{$field.GraphType}}) {
					return helper.{{ $field.CustomToFunction }}IDUnique(v, models.TableNames.{{ $model.Name|go }})
				}
				
			{{- end -}}
		{{- end }}
	


	func {{ .Name|go }}ToGraphQL(m *models.{{ .BoilerName|go }}, roots []interface{})( *graphql_models.{{ .Name|go }}) {
		if m == nil {
			return nil
		}

		r := &graphql_models.{{ .Name|go }}{
			{{ range $field := .Fields }}
				{{- with .Description }}
					{{.|prefixLines "// "}}
				{{- end}}
				{{- if $field.IsID -}}
					{{- $field.Name|go }}:  {{ $field.CustomBoilerIDFunction|go }}(m.{{ $field.BoilerName|go }}),
				{{- else if $field.IsRelation -}}
				{{- else if $field.IsCustomFunction }}
					{{ $field.Name|go }}: helper.{{ $field.CustomToFunction }}(m.{{ $field.BoilerName|go }}),
				{{- else }}	
					{{ $field.Name|go }}: m.{{ $field.BoilerName|go }},
				{{- end -}}
			{{- end }}
		}

		{{ range $field := .Fields }}
	
			{{- if $field.IsRelation }}
				{{- if $field.IsPlural }}
					if m.R != nil && m.R.{{ $field.Name|go }} != nil  {
						r.{{ $field.Name|go }} = {{ $field.PlularBoilerRelationShipName|go }}ToGraphQL(m.R.{{ $field.Name|go }}, append(roots, m))
					} 
				{{- else }}	
				
				if helper.{{ $field.CustomBoilerType }}IsFilled(m.{{ $field.Name|go }}ID) {
					if m.R != nil && m.R.{{ $field.Name|go }} != nil  {
						if !alreadyConverted(roots,  m.R.{{ $field.Name|go }}) {
							r.{{ $field.Name|go }} ={{ $field.BoilerRelationShipName|go }}ToGraphQL(m.R.{{ $field.Name|go }}, append(roots, m))
						}
					} else {
						r.{{ $field.Name|go }} = {{ $field.BoilerRelationShipName|go }}With{{ $field.CustomBoilerType|go }}ID(m.{{ $field.Name|go }}ID)
					}
				}
				{{- end -}}
			{{end -}}
		{{- end }}

		return r
	}

		{{ range $field := .Fields }}
			{{- if $field.IsPrimaryID }}
				func {{ $model.Name|go }}IDNullable(v *{{$field.GraphType}})(null.{{$field.BoilerType|go}}) {
					if v == nil {
						return null.{{$field.BoilerType|go}}{
							Valid: false,
						}
					}
					s := helper.{{ $field.CustomFromFunction }}ID(*v)
					return null.{{$field.BoilerType|go}}{
						Valid: s != 0,
						{{$field.BoilerType|go}}: s,
					}
				}
				func {{ $model.Name|go }}IDValueOfNullable(v *{{$field.GraphType}})({{$field.BoilerType}}) {
					if v == nil {
						return 0
					}
					return helper.{{ $field.CustomFromFunction }}ID(*v)
				}

				func {{ $model.Name|go }}ID(v {{$field.GraphType}})({{$field.BoilerType}}) {
					return helper.{{ $field.CustomFromFunction }}ID(v)
				}

				func {{ $model.Name|go }}IDsToUints(a []string) []uint {
					return helper.IDsToUints(a)
				}

				func {{ $model.Name|go }}IDsToInts(a []string) []int {
					return helper.IDsToInts(a)
				}
				
			{{- end -}}
		{{- end }}
	{{- end }}
	{{- end }}
{{- end }}
