{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}
{{ reserveImport "github.com/ericlagergren/decimal"  }}
{{ reserveImport "github.com/volatiletech/null"  }}
{{ reserveImport "github.com/volatiletech/sqlboiler/types"  }}

{{ reserveImport "github.com/vektah/gqlparser" }}
{{ reserveImport "github.com/vektah/gqlparser/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}
{{ reserveImport  $.BackendModelsPath }}
{{ reserveImport  $.FrontendModelsPath }}

func StringToIntID(ID string, entityName string) int {
	i, _ := strconv.ParseInt(strings.TrimPrefix(ID, entityName+"_"), 10, 64)
	return int(i)
}

func IntToStringUniqueID(id int, entityName string) string {
	return entityName + "_" + strconv.Itoa(id)
}

func StringToUintID(ID string, entityName string) uint {
	i, _ := strconv.ParseUint(strings.TrimPrefix(ID, entityName+"_"), 10, 64)
	return uint(i)
}

func UintToStringUniqueID(id uint, entityName string) string {
	return entityName + "_" + strconv.Itoa(int(id))
}

func NullDotBoolToPointerBool(v null.Bool) *bool {
	return v.Ptr()
}

func NullDotStringToPointerString(v null.String) *string {
	return v.Ptr()
}

func NullDotTimeToPointerInt(v null.Time) *int {
	pv := v.Ptr()
	if pv == nil {
		return nil
	}
	u := int(pv.Unix())
	return &u
}

func NullDotUintToPointerInt(v null.Uint) *int {
	pv := v.Ptr()
	if pv == nil {
		return nil
	}
	u := int(*pv)
	return &u
}

func PointerIntToNullDotTime(v *int) null.Time {
	if v == nil {
		return null.Time{
			Valid: false,
		}
	}
	return null.Time{
		Valid: true,
		Time:  time.Unix(int64(*v), 0),
	}
}

func PointerStringToNullDotString(v *string) null.String {
	if v == nil {
		return null.String{
			Valid: false,
		}
	}
	return null.String{
		Valid:  v != nil,
		String: *v,
	}
}

func PointerBoolToNullDotBool(v *bool) null.Bool {
	if v == nil {
		return null.Bool{
			Valid: false,
		}
	}
	return null.Bool{
		Valid: v != nil,
		Bool:  *v,
	}
}

func TypesNullDecimalToPointerString(v types.NullDecimal) *string {
	s := v.String()
	if s == "" {
		return nil
	}
	return &s
}

func PointerStringToTypesNullDecimal(v *string) types.NullDecimal {
	if v == nil {
		return types.NewNullDecimal(nil)
	}
	d := new(decimal.Big)
	if _, ok := d.SetString(*v); !ok {
		nd := types.NewNullDecimal(nil)
		if err := d.Context.Err(); err != nil {
			return nd
		}
		// TODO: error handling maybe write log line here
		// https://github.com/volatiletech/sqlboiler/blob/master/types/decimal.go#L156
		return nd
	}

	return types.NewNullDecimal(d)
}

func PointerIntToNullDotInt(v *int) null.Int {
	// TODO
	if v == nil {
		return null.Int{}
	}
	return null.Int{}
}
func PointerIntToNullDotUint(v *int) null.Uint {
		// TODO
	if v == nil {
		return null.Uint{}
	}
	return null.Uint{}
}
func NullDotIntToPointerInt(v null.Int) *int {
	// TODO
	return nil
}
func IntToInt8(v int) int8 {
	return int8(v)
}
func Int8ToInt(v int8) int {
	return int(v)
}
func NullDotFloat64ToPointerFloat64(v null.Float64) *float64 {
	// TODO
	return nil
	
}
func PointerFloat64ToNullDotFloat64(v *float64) null.Float64 {
		// TODO
	if v == nil {
		return null.Float64{}
	}
	return null.Float64{}
}

func IntToUint(v int) uint {
	return uint(v)
}

func UintToInt(v uint) int {
	return int(v)
}

func BoolToInt(v bool) int {
	if v == true {
		return 1
	}
	return 0
}

func IntToBool(v int) bool {
	return v == 1
}

func NullDotBoolToPointerInt(v null.Bool) *int {
	pv := v.Ptr()
	if pv == nil {
		return nil
	}
	if *pv == true {
		i := 1
		return &i
	}
	i := 0
	return &i
}

func PointerIntToNullDotBool(v *int) null.Bool{
	if v == nil {
		return null.Bool{
			Valid: false,
		}
	}
	return null.Bool{
		Valid: v != nil,
		Bool:  *v == 1,
	}
}

func NullDotUintIsZero(v null.Uint) bool {
	return v.IsZero()
}
func UintIsZero(v uint) bool {
	return v == 0
}


{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}

	func {{ .Name|go }}WithIntID(id int) *graphql_models.{{ .Name|go }} {
		return &graphql_models.{{ .Name|go }}{
			ID: IntToStringUniqueID(id, "{{ $model.Name|go }}"),
		}
	}
	func {{ .Name|go }}WithUintID(id uint) *graphql_models.{{ .Name|go }} {
		return &graphql_models.{{ .Name|go }}{
			ID: UintToStringUniqueID(id, "{{ $model.Name|go }}"),
		}
	}

	func {{ .Name|go }}WithNullDotUintID(id null.Uint) *graphql_models.{{ .Name|go }} {
		return {{ .Name|go }}WithUintID(id.Uint)
	}
	func {{ .Name|go }}WithNullDotIntID(id null.Int) *graphql_models.{{ .Name|go }} {
		return {{ .Name|go }}WithIntID(id.Int)
	}

	func {{ .Name|go }}ToGraphQL(m *models.{{ .Name|go }})( *graphql_models.{{ .Name|go }}) {
		if m == nil {
			return nil
		}
		r := &graphql_models.{{ .Name|go }}{
			{{ range $field := .Fields }}
			
				{{- with .Description }}
					{{.|prefixLines "// "}}
				{{- end}}
				{{- if $field.IsId -}}
					{{ $field.Name|go }}: {{ $field.CustomToFunction }}UniqueID(m.{{ $field.BoilerName|go }}, "{{ $model.Name|go }}"),
				{{- else if $field.IsRelation -}}
				
				{{- else if $field.IsCustomFunction }}
					{{ $field.Name|go }}: {{ $field.CustomToFunction }}(m.{{ $field.BoilerName|go }}),
				{{- else }}	
					{{ $field.Name|go }}: m.{{ $field.BoilerName|go }},
				{{- end -}}
			{{- end }}
		}

		{{- range $field := .Fields }}
			{{- if $field.IsRelation }}
			if {{ $field.CustomBoilerType }}IsZero(m.{{ $field.Name|go }}ID) {
				if m.R == nil || m.R.{{ $field.Name|go }} == nil {
					r.{{ $field.Name|go }} = {{ $field.Name|go }}With{{ $field.CustomBoilerType|go }}ID(m.{{ $field.Name|go }}ID)
				} else {
					r.{{ $field.Name|go }} ={{ $field.Name|go }}ToGraphQL(m.R.{{ $field.Name|go }})
				}
			}
			{{end -}}
		{{- end }}

		return r
	}


	func {{ .Name|go }}ToBoiler(m *graphql_models.{{ .Name|go }})( *models.{{ .Name|go }}) {
		if m == nil {
			return nil
		}	
		r := &models.{{ .Name|go }}{
		{{ range $field := .Fields }}
			{{- with .Description }}
				{{.|prefixLines "// "}}
			{{- end}}
			{{- if $field.IsId -}}
				{{ $field.BoilerName|go }} : {{ $field.CustomFromFunction }}ID(m.{{ $field.Name|go }}, "{{ $model.Name|go }}"),
			{{- else if $field.IsRelation }}
				// {{ $field.BoilerName|go }}ID : {{ $field.Name }}ID(m.{{ $field.Name|go }}, "{{ $field.BoilerName|go }}"),
			{{- else if $field.IsCustomFunction }}
				{{ $field.BoilerName|go }} : {{ $field.CustomFromFunction }}(m.{{ $field.Name|go }}),
			{{- else }}	
				{{ $field.BoilerName|go }}: m.{{ $field.Name|go }},
			{{- end -}}
		{{- end }}
		}
		return r
	}

{{- end }}
